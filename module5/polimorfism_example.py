# -----------------------------
#                             |
#    github.com/nudimannui4e  |
#                             |
# -----------------------------

class Animal:

    def __init__(self, name):
        self._name = name
        self.healt = 100

    def make_noise(self):
        print('Grrrrrrr')


class Cat(Animal):
    """
    Вот тут внезапно появляется полиморфизм, или - попытка Бруноям впихнуть ООП в новичков за 25 мин
    ускоренной нарезки видео. У меня ушло пока 3 дня, чтобы просто полностью осознать основы ООП,
    перечитав несколько глав из 3-х книг, просмотрев объяснения с YouTube (где никто не рисковал так,
    впихнуть в 25 мин все)


    Смысл примерно такой: Cat наследует __init__ (с name и healt) от Animal (Родительский класс),
    и ниже переопределяет метод make_noise
    В данном случае это делается для того, чтобы не городить кучу разных имен,
    на фактически одинаковые действия объектов.
    """
    def make_noise(self):
        print('Meow')


class Dog(Animal):

    def make_noise(self):
        print('Gav')


cat = Cat("Semen")
dog = Dog("Ivan")

cat.make_noise()
dog.make_noise()

"""
А тут говорят - давайте используем простую инкапсуляцию,
чтобы обойти приватность методов. (Это который self._name = name)
Последовательность на высшем уровне.
"""
print(cat._name)
